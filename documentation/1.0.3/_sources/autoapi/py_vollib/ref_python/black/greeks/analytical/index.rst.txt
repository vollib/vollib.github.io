:py:mod:`py_vollib.ref_python.black.greeks.analytical`
======================================================

.. py:module:: py_vollib.ref_python.black.greeks.analytical

.. autoapi-nested-parse::

   py_vollib.ref_python.black.greeks.analytical
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   A library for option pricing, implied volatility, and
   greek calculation.  py_vollib is based on lets_be_rational,
   a Python wrapper for LetsBeRational by Peter Jaeckel as
   described below.

   :copyright: Â© 2023 Larry Richards
   :license: MIT, see LICENSE for more details.

   py_vollib.ref_python is a pure python version of py_vollib without any dependence on LetsBeRational. It is provided purely as a reference implementation for sanity checking. It is not recommended for industrial use.
   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   py_vollib.ref_python.black.greeks.analytical.delta
   py_vollib.ref_python.black.greeks.analytical.theta
   py_vollib.ref_python.black.greeks.analytical.gamma
   py_vollib.ref_python.black.greeks.analytical.vega
   py_vollib.ref_python.black.greeks.analytical.rho



Attributes
~~~~~~~~~~

.. autoapisummary::

   py_vollib.ref_python.black.greeks.analytical.N


.. py:data:: N

   

.. py:function:: delta(flag, F, K, t, r, sigma)

   Returns the Black delta of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param F: underlying futures price
   :type F: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float

   :returns:  float

   >>> F = 49
   >>> K = 50
   >>> r = .05
   >>> t = 0.3846
   >>> sigma = 0.2
   >>> flag = 'c'
   >>> v1 = delta(flag, F, K, t, r, sigma)
   >>> v2 = 0.45107017482201828
   >>> abs(v1-v2) < .000001
   True


.. py:function:: theta(flag, F, K, t, r, sigma)

   Returns the Black theta of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param F: underlying futures price
   :type F: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float

   :returns:  float

   >>> F = 49
   >>> K = 50
   >>> r = .05
   >>> t = 0.3846
   >>> sigma = 0.2
   >>> flag = 'c'
   >>> v1 = theta(flag, F, K, t, r, sigma)
   >>> v2 = -0.00816236877462
   >>> abs(v1-v2) < .000001
   True
   >>> flag = 'p'
   >>> v1 = theta(flag, F, K, t, r, sigma)
   >>> v2 = -0.00802799155312
   >>> abs(v1-v2) < .000001
   True


.. py:function:: gamma(flag, F, K, t, r, sigma)

   Returns the Black gamma of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param F: underlying futures price
   :type F: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float

   :returns:  float

   >>> F = 49
   >>> K = 50
   >>> r = .05
   >>> t = 0.3846
   >>> sigma = 0.2
   >>> flag = 'c'
   >>> v1 = gamma(flag, F, K, t, r, sigma)
   >>> # 0.0640646705882
   >>> v2 = 0.0640646705882
   >>> abs(v1-v2) < .000001
   True


.. py:function:: vega(flag, F, K, t, r, sigma)

   Returns the Black vega of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param F: underlying futures price
   :type F: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float

   :returns:  float

   ::

       ==========================================================
       Note: The text book analytical formula does not multiply by .01,
       but in practice vega is defined as the change in price
       for each 1 percent change in IV, hence we multiply by 0.01.
       ==========================================================

   >>> F = 49
   >>> K = 50
   >>> r = .05
   >>> t = 0.3846
   >>> sigma = 0.2
   >>> flag = 'c'
   >>> v1 = vega(flag, F, K, t, r, sigma)
   >>> # 0.118317785624
   >>> v2 = 0.118317785624
   >>> abs(v1-v2) < .000001
   True


.. py:function:: rho(flag, F, K, t, r, sigma)

   Returns the Black rho of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param F: underlying futures price
   :type F: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float

   :returns:  float

   ::

       ==========================================================
       The text book analytical formula does not multiply by .01,
       but in practice rho is defined as the change in price
       for each 1 percent change in r, hence we multiply by 0.01.
       ==========================================================

   >>> F = 49
   >>> K = 50
   >>> r = .05
   >>> t = 0.3846
   >>> sigma = 0.2
   >>> flag = 'c'
   >>> v1 = rho(flag, F, K, t, r, sigma)
   >>> v2 = -0.0074705380059582258
   >>> abs(v1-v2) < .000001
   True
   >>> flag = 'p'
   >>> v1 = rho(flag, F, K, t, r, sigma)
   >>> v2 = -0.011243286001308292
   >>> abs(v1-v2) < .000001
   True


