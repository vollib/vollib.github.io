:py:mod:`py_vollib.ref_python.black_scholes_merton.greeks.analytical`
=====================================================================

.. py:module:: py_vollib.ref_python.black_scholes_merton.greeks.analytical

.. autoapi-nested-parse::

   py_vollib.ref_python.black_scholes_merton.greeks.analytical
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   A library for option pricing, implied volatility, and
   greek calculation.  py_vollib is based on lets_be_rational,
   a Python wrapper for LetsBeRational by Peter Jaeckel as
   described below.

   :copyright: Â© 2023 Larry Richards
   :license: MIT, see LICENSE for more details.

   py_vollib.ref_python is a pure python version of py_vollib without any dependence on LetsBeRational. It is provided purely as a reference implementation for sanity checking. It is not recommended for industrial use.
   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   py_vollib.ref_python.black_scholes_merton.greeks.analytical.delta
   py_vollib.ref_python.black_scholes_merton.greeks.analytical.theta
   py_vollib.ref_python.black_scholes_merton.greeks.analytical.gamma
   py_vollib.ref_python.black_scholes_merton.greeks.analytical.vega
   py_vollib.ref_python.black_scholes_merton.greeks.analytical.rho



Attributes
~~~~~~~~~~

.. autoapisummary::

   py_vollib.ref_python.black_scholes_merton.greeks.analytical.N


.. py:data:: N

   

.. py:function:: delta(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton delta of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float

   Example 17.1, page 355, Hull:

   >>> S = 49
   >>> K = 50
   >>> r = .05
   >>> t = 0.3846
   >>> q = 0
   >>> sigma = 0.2
   >>> flag = 'c'
   >>> delta_calc = delta(flag, S, K, t, r, sigma, q)
   >>> # 0.521601633972
   >>> delta_text_book = 0.522
   >>> abs(delta_calc - delta_text_book) < .01
   True


.. py:function:: theta(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton theta of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float

   The text book analytical formula does not divide by 365,
   but in practice theta is defined as the change in price
   for each day change in t, hence we divide by 365.

   Example 17.2, page 359, Hull:

   >>> S = 49
   >>> K = 50
   >>> r = .05
   >>> t = 0.3846
   >>> q = 0
   >>> sigma = 0.2
   >>> flag = 'c'
   >>> annual_theta_calc = theta(flag, S, K, t, r, sigma, q) * 365
   >>> # -4.30538996455
   >>> annual_theta_text_book = -4.31
   >>> abs(annual_theta_calc - annual_theta_text_book) < .01
   True

   Using the same inputs with a put.
   >>> S = 49
   >>> K = 50
   >>> r = .05
   >>> t = 0.3846
   >>> sigma = 0.2
   >>> flag = 'p'
   >>> annual_theta_calc = theta(flag, S, K, t, r, sigma, q) * 365
   >>> # -1.8530056722
   >>> annual_theta_reference = -1.8530056722
   >>> abs(annual_theta_calc - annual_theta_reference) < .000001
   True


.. py:function:: gamma(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton gamma of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float

   Example 17.4, page 364, Hull:

   >>> S = 49
   >>> K = 50
   >>> r = .05
   >>> t = 0.3846
   >>> q = 0
   >>> sigma = 0.2
   >>> flag = 'c'
   >>> gamma_calc = gamma(flag, S, K, t, r, sigma, q)
   >>> # 0.0655453772525
   >>> gamma_text_book = 0.066
   >>> abs(gamma_calc - gamma_text_book) < .001
   True


.. py:function:: vega(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton vega of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float

   The text book analytical formula does not multiply by .01,
   but in practice vega is defined as the change in price
   for each 1 percent change in IV, hence we multiply by 0.01.

   Example 17.6, page 367, Hull:

   >>> S = 49
   >>> K = 50
   >>> r = .05
   >>> t = 0.3846
   >>> q = 0
   >>> sigma = 0.2
   >>> flag = 'c'
   >>> vega_calc = vega(flag, S, K, t, r, sigma, q)
   >>> # 0.121052427542
   >>> vega_text_book = 0.121
   >>> abs(vega_calc - vega_text_book) < .01
   True


.. py:function:: rho(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton rho of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float

   The text book analytical formula does not multiply by .01,
   but in practice rho is defined as the change in price
   for each 1 percent change in r, hence we multiply by 0.01.

   Example 17.7, page 368, Hull:

   >>> S = 49
   >>> K = 50
   >>> r = .05
   >>> t = 0.3846
   >>> q = 0
   >>> sigma = 0.2
   >>> flag = 'c'
   >>> rho_calc = rho(flag, S, K, t, r, sigma, q)
   >>> # 0.089065740988
   >>> rho_text_book = 0.0891
   >>> abs(rho_calc - rho_text_book) < .0001
   True


