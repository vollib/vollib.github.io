:py:mod:`py_vollib.ref_python.black_scholes_merton.greeks.numerical`
====================================================================

.. py:module:: py_vollib.ref_python.black_scholes_merton.greeks.numerical

.. autoapi-nested-parse::

   py_vollib.ref_python.black_scholes_merton.greeks.numerical
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   A library for option pricing, implied volatility, and
   greek calculation.  py_vollib is based on lets_be_rational,
   a Python wrapper for LetsBeRational by Peter Jaeckel as
   described below.

   :copyright: Â© 2023 Larry Richards
   :license: MIT, see LICENSE for more details.

   py_vollib.ref_python is a pure python version of py_vollib without any dependence on LetsBeRational. It is provided purely as a reference implementation for sanity checking. It is not recommended for industrial use.
   +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   py_vollib.ref_python.black_scholes_merton.greeks.numerical.delta
   py_vollib.ref_python.black_scholes_merton.greeks.numerical.theta
   py_vollib.ref_python.black_scholes_merton.greeks.numerical.vega
   py_vollib.ref_python.black_scholes_merton.greeks.numerical.rho
   py_vollib.ref_python.black_scholes_merton.greeks.numerical.gamma
   py_vollib.ref_python.black_scholes_merton.greeks.numerical.test_analytical_vs_numerical



Attributes
~~~~~~~~~~

.. autoapisummary::

   py_vollib.ref_python.black_scholes_merton.greeks.numerical.f


.. py:data:: f

   

.. py:function:: delta(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton delta of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float


.. py:function:: theta(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton theta of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float


.. py:function:: vega(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton vega of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float


.. py:function:: rho(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton rho of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float


.. py:function:: gamma(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton gamma of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float


.. py:function:: test_analytical_vs_numerical()

   Test by comparing analytical and numerical values.

   >>> S =  49
   >>> K = 50
   >>> r = .05
   >>> q = .05 
   >>> t = 0.3846
   >>> sigma = 0.2
   >>> flag = 'c'

   >>> epsilon = .0001

   >>> v1 = delta(flag, S, K, t, r, sigma, q)
   >>> v2 = adelta(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = gamma(flag, S, K, t, r, sigma, q)
   >>> v2 = agamma(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = rho(flag, S, K, t, r, sigma, q)
   >>> v2 = arho(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = vega(flag, S, K, t, r, sigma, q)
   >>> v2 = avega(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = theta(flag, S, K, t, r, sigma, q)
   >>> v2 = atheta(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True


