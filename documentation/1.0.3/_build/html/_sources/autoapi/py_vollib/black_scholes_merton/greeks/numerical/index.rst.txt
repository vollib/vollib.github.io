:py:mod:`py_vollib.black_scholes_merton.greeks.numerical`
=========================================================

.. py:module:: py_vollib.black_scholes_merton.greeks.numerical

.. autoapi-nested-parse::

   py_vollib.black_scholes_merton.greeks.numerical
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   A library for option pricing, implied volatility, and
   greek calculation.  py_vollib is based on lets_be_rational,
   a Python wrapper for LetsBeRational by Peter Jaeckel as
   described below.

   :copyright: © 2023 Larry Richards
   :license: MIT, see LICENSE for more details.

   About LetsBeRational:
   ~~~~~~~~~~~~~~~~~~~~~

   The source code of LetsBeRational resides at www.jaeckel.org/LetsBeRational.7z .

   ::

       ========================================================================================
       Copyright © 2013-2014 Peter Jäckel.

       Permission to use, copy, modify, and distribute this software is freely granted,
       provided that this notice is preserved.

       WARRANTY DISCLAIMER
       The Software is provided "as is" without warranty of any kind, either express or implied,
       including without limitation any implied warranties of condition, uninterrupted use,
       merchantability, fitness for a particular purpose, or non-infringement.
       ========================================================================================




Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   py_vollib.black_scholes_merton.greeks.numerical.delta
   py_vollib.black_scholes_merton.greeks.numerical.theta
   py_vollib.black_scholes_merton.greeks.numerical.vega
   py_vollib.black_scholes_merton.greeks.numerical.rho
   py_vollib.black_scholes_merton.greeks.numerical.gamma
   py_vollib.black_scholes_merton.greeks.numerical.test_analytical_vs_numerical



Attributes
~~~~~~~~~~

.. autoapisummary::

   py_vollib.black_scholes_merton.greeks.numerical.f


.. py:data:: f

   

.. py:function:: delta(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton delta of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float 


.. py:function:: theta(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton theta of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float 


.. py:function:: vega(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton vega of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float 


.. py:function:: rho(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton rho of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float 


.. py:function:: gamma(flag, S, K, t, r, sigma, q)

   Returns the Black-Scholes-Merton gamma of an option.

   :param flag: 'c' or 'p' for call or put.
   :type flag: str
   :param S: underlying asset price
   :type S: float
   :param K: strike price
   :type K: float
   :param t: time to expiration in years
   :type t: float
   :param r: annual risk-free interest rate
   :type r: float
   :param sigma: volatility
   :type sigma: float
   :param q: annualized continuous dividend yield
   :type q: float

   :returns:  float 


.. py:function:: test_analytical_vs_numerical()

   Test by comparing analytical and numerical values.

   >>> flag='c'
   >>> S=1000.0
   >>> K=1000.0
   >>> t=0.1
   >>> r=0.05
   >>> sigma=0.3
   >>> q = 0.05
   >>> sigma = 0.2
   >>> flag = 'c'

   >>> epsilon = 0.01

   >>> v1 = delta(flag, S, K, t, r, sigma, q)
   >>> v2 = adelta(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = gamma(flag, S, K, t, r, sigma, q)
   >>> v2 = agamma(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = rho(flag, S, K, t, r, sigma, q)
   >>> v2 = arho(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = vega(flag, S, K, t, r, sigma, q)
   >>> v2 = avega(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = theta(flag, S, K, t, r, sigma, q)
   >>> v2 = atheta(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   Test PUT flag

   >>> flag = 'p'

   >>> v1 = delta(flag, S, K, t, r, sigma, q)
   >>> v2 = adelta(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = gamma(flag, S, K, t, r, sigma, q)
   >>> v2 = agamma(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = rho(flag, S, K, t, r, sigma, q)
   >>> v2 = arho(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = vega(flag, S, K, t, r, sigma, q)
   >>> v2 = avega(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True

   >>> v1 = theta(flag, S, K, t, r, sigma, q)
   >>> v2 = atheta(flag, S, K, t, r, sigma, q)
   >>> abs(v1-v2)<epsilon
   True


